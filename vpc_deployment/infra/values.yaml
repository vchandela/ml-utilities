# --- Deployment for your application ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpc-deployment-app
  namespace: vpc-deployment # <-- Add namespace here
  labels:
    app: vpc-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vpc-deployment
  template:
    metadata:
      labels:
        app: vpc-deployment
    spec:
      containers:
      - name: app
        image: us-central1-docker.pkg.dev/onboarding-455713/vpc-deployment/vpc-deployment:latest # docker image
        ports:
        - containerPort: 80
          name: http
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 20

---

# --- Service to expose your application ---
apiVersion: v1
kind: Service
metadata:
  name: vpc-deployment-service
  namespace: vpc-deployment # <-- Add namespace here
  labels:
    app: vpc-deployment
spec:
  selector:
    app: vpc-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: http
      name: http
  type: ClusterIP

---

# --- ServiceMonitor to tell Prometheus how to scrape this Service ---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: vpc-deployment-servicemonitor
  namespace: vpc-deployment # <-- Add namespace here (important for Prometheus Operator!)
  labels:
    release: prometheus # Assumes your Prometheus is labeled this way
spec:
  selector:
    matchLabels:
      app: vpc-deployment # Selects the Service with this label
  namespaceSelector:
    matchNames:
      - vpc-deployment
  endpoints:
    - port: http
      interval: 30s
      path: /metrics